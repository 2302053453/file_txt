printenv
emmc list
reset
Printenv 打印环境变量。

    Uboot> printenv
    baudrate=115200
    ipaddr=192.168.1.1
    ethaddr=12:34:56:78:9A:BC
    serverip=192.168.1.5
    Environment size: 80/8188 bytes

Setenv 设置新的变量

    Uboot> setenv myboard AT91RM9200DK
    Uboot> printenv
    baudrate=115200
    ipaddr=192.168.1.1
    ethaddr=12:34:56:78:9A:BC
    serverip=192.168.1.5
    myboard=AT91RM9200DK
    Environment size: 102/8188 bytes

Saveenv 保存变量

    命令将当前定义的所有的变量及其值存入flash中。用来存储变量及其值的空间只有8k字节，应不要超过。

Loadb 通过串口Kermit协议下载二进制数据。

Tftp 通过网络下载程序，需要先设置好网络配置

    Uboot> setenv ethaddr 12:34:56:78:9A:BC
    Uboot> setenv ipaddr 192.168.1.1
    Uboot> setenv serverip 192.168.1.254     （tftp服务器的地址）
    下载bin文件到地址0x20000000处。
    Uboot> tftp 20000000 application.bin （application.bin应位于tftp服务程序的目录）

    Uboot> tftp 32000000 vmlinux
    把server（IP=环境变量中设置的serverip）中/tftpdroot/ 下的vmlinux通过TFTP读入到物理内存32000000处。

Md 显示内存区的内容。

Mm 修改内存，地址自动递增。

Nm 修改内存，地址不自动递增。

Mw 用模型填充内存

    mw 32000000 ff 10000(把内存0x32000000开始的0x10000字节设为0xFF)

Cp 拷贝一块内存到另一块

   cp.b 20000000 10000000 ffff ；将20000000的数据写入10000000，ffff为文件大小

Cmp 比较两块内存区

    这些内存操作命令后都可加一个后缀表示操作数据的大小，比如cp.b表示按字节拷贝。

Protect 写保护操作

    protect on 1:0-3(就是对第一块FLASH的0-3扇区进行保护)
    protect off 1:0-3取消写保护

Erase 擦除扇区。

    erase: 删除FLASH的扇区
    erase 1:0-2(就是对每一块FLASH的0-2扇区进行删除)

对DataFlash的操作

    U-Boot在引导时如果发现NPCS0和NPCS3上连有DataFlash，就会分配虚拟的地址给它，具体为 ：
    0xC0000000---NPCS0
    0xD0000000---NPCS3

run 执行设置好的脚本

    Uboot> setenv flashit tftp 20000000 mycode.bin\; erase 10020000 1002FFFF\;
    cp.b 20000000 10020000 8000
    Uboot> saveenv
    Uboot> run flashit

bootcmd 保留的环境变量,也是一种脚本

    如果定义了该变量，在autoboot模式下，将会执行该脚本的内容。

Go 执行内存中的二进制代码，一个简单的跳转到指定地址

Bootm 执行内存中的二进制代码

    要求二进制代码为制定格式的。通常为mkimage处理过的二进制文件。
    起动UBOOT TOOLS制作的压缩LINUX内核, bootm 3200000

Bootp 通过网络启动，需要提前设置好硬件地址。

？ 得到所有命令列表

help help usb, 列出USB功能的使用说明

ping 注：只能开发板PING别的机器

usb

    usb start: 起动usb 功能
    usb info: 列出设备
    usb scan: 扫描usb storage(u 盘)设备

kgo 起动没有压缩的linux内核

    kgo 32000000

fatls 列出DOS FAT文件系统

    fatls usb 0列出第一块U盘中的文件

fatload 读入FAT中的一个文件

    fatload usb 0:0 32000000 aa.txt 把USB中的aa.txt 读到物理内存0x32000000处！

flinfo 列出flash的信息nfs

二：mmc的命令详解
1：mmcinfo
输入：
mmcinfo
显示结果：
Manufacturer ID: 45
OEM: 100
Name: SEM08
Tran Speed: 25000000
Rd Block Len: 512
MMC version 4.0
Clock: 52000000
High Capacity: Yes
Capacity: 7944011776 Bytes
Bus Width: 8-bit DDR
Current Partition for boot: Boot partition 1

2：mmc list -lists available devices

输入：
mmc list
显示如下：
FSL_USDHC: 0
FSL_USDHC: 1
FSL_USDHC: 2
FSL_USDHC: 3

分析：boot中配置了四个mmc资源,SD卡是2,EMMC是3

3：mmc dev[dev] [part] - show or set current mmc device [partition]

输入：
mmc dev 3
显示如下：
mmc3(part 0) is current device

分析：表示当前处于EMMC设备的第0个分区

输入：
mmc dev 3 1
显示如下：
mmc3(part 1) is current device

分析：设置当前处于EMMC设备的第1个分区

4：mmc bootpart [dev] [part] - show or set boot partition

输入：
mmc bootpart
显示如下：
Device 3: boot partition 1 is for boot

分析：uboot处于第一个分区

5：mmc part -lists available partition on current mmc device

输入：
mmc part
显示如下：
Partition Map for UNKNOWN device 3 -- Partition Type: DOS

Partition Start Sector Num Sectors Type
1 16384 16384 83
2 32768 16384 83
3 49152 6397952 5 Extd
4 6447104 9150464 83
5 49153 3145727 83
6 3194881 3145727 83
7 6340609 16383 83
8 6356993 8191 83

分析：显示当前EMMC的所有分区

6：mmc read addr blk# cnt
这个命令的作用是读取mmc上的数据到内存上

参数：
addr： 读取到内存的位置
blk： 读取block位置，这个位置是mmc的0地址的偏移量，是16进 制，block单位是512字节
cnt： 读取block个数，要读取到内存的数据大小，是16进制
block单位是512字节

例：
mmc dev 3 0
mmc read 0x10800000 600 10

命令分析：表示从mmc上1536×512个字节开始处（1536是600的十进制），读取16×512个字节（16是10的10进制）到内存0x10800000 处

显示结果：
MMC read: dev #3, block # 1536, count 16 ... 16 blocks read: OK
结果分析：
我们只能从结果看出来读取成功，但不能确定读取的内容是否正确，所以打印下内存的数据，看是否与mmc中的内容一致

输入：
md.b 0x10800000 100
命令分析：打印内存位置0x10800000的100个字节
显示结果：
10800000: b15ecb3c 6f62 746f 6564 616c 3d79 0033 ^.<.bootdelay=3.
10800010: 61626475 6172 6574 313d 3531 3032 0030 baudrate=115200.
10800020: 70696461 7264 313d 3239 312e 3836 312e ipaddr=192.168.1
10800030: 312e3330 7300 7265 6576 6972 3d70 3931 .103.serverip=19
10800040: 2e323631 2e38 2e31 3031 0031 656e 6d74 2.168.1.101.netm
10800050: 73613d6b 3532 2e35 3532 2e35 3532 2e35 ask=255.255.255.
.....
.......
结果分析：
我在mmc位置1536×512的位置储存的是环境变量，与内存打印的一致，读取正确

7:mmc write addr blk# cnt
这个命令的作用是将内存上的数据写入mmc中

参数：
addr： 从内存读取的位置
blk： 写入到mmc中block位置，这个位置是mmc的0地址的偏移量，是16进制，block单位是512字节
cnt： 写入到mmc中block个数，要写入的数据大小，是16进制，
block单位是512字节

例：
mmc dev 3
mmc write 0x108000000 0 100

命令分析：表示从内存0x108000000的位置上读取256*512的数据(256是100的十进制)到mmc上0的位置处，这里就不举例验证了

mmc上0的位置处是分区表，我把内存上的乱数据写进去后，uboot检测不到分区了

8:mmc erase blk# cnt
参数：
blk： 擦除的mmc中block位置，这个位置是mmc的0地址的偏移量，是16进制，block单位是512字节
cnt： 擦除的mmc中block个数，是16进制，block单位是512字节
