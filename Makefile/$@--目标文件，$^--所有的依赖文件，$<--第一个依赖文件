$@--目标文件，$^--所有的依赖文件，$<--第一个依赖文件

当然由于这个程序是很短的我们可以这样来编译

	gcc -c main.c

	gcc -c mytool1.c

	gcc -c mytool2.c

	gcc -o main main.o mytool1.o mytool2.o



# 这是上面那个程序的Makefile文件

	main：main.o mytool1.o mytool2.o

	gcc -o main main.o mytool1.o mytool2.o

	main.o：main.c mytool1.h mytool2.h

	gcc -c main.c

	mytool1.o：mytool1.c mytool1.h

	gcc -c mytool1.c

	mytool2.o：mytool2.c mytool2.h

	gcc -c mytool2.c


$@--目标文件，$^--所有的依赖文件，$<--第一个依赖文件。

	如果我们使用上面三个变量，那么我们可以简化我们的Makefile文件为：

# 这是简化后的Makefile

	main：main.o mytool1.o mytool2.o

	gcc -o $@ $^

	main.o：main.c mytool1.h mytool2.h

	gcc -c $<

	mytool1.o：mytool1.c mytool1.h

	gcc -c $<

	mytool2.o：mytool2.c mytool2.h

	gcc -c $<

经过简化后我们的Makefile是简单了一点，不过人们有时候还想简单一点。这里我们学习一个Makefile的缺省规则

	.c.o：

	gcc -c $<

这个规则表示所有的 .o文件都是依赖与相应的.c文件的。例如mytool.o依赖于mytool.c这样Makefile还可以变为：

