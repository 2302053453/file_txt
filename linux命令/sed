sed 替换字符
sed -e 's/^ *[0-9]\{1,\}//'

sed -i "s/原字符/新字符/g"  `grep 原字符 -rl 所在目录`
-i 就地修改
-r 搜索子目录
-l 配备文件名
-i：直接修改源文件（不用这个选项的话无法直接修改，必须重定向到新文件，如果仅作为输出测试则不需此选项），还可将源文件修改前备份
^[0-9]表示行第一个字符为任意数字，例如“1asdf”；
^[0-9]*表示行首包含任意个数的数字，例如“1818asdf”
[0-9][0-9]*$表示行尾包含至少2个数字，例如“asdfasdf18”“asdf1818”
sed -i 's/^[0-9]*//g' test.txt 删除行首的任意数字
sed -i -e 's/^[0-9]*//g' -i -e 's/$/& passed/' test.txt 删除行首任意数字，并在每行结尾加上“ passed”
sed -i -e 's/^/#&' test.txt 给每行行首加上“#”注释
s/\.$//g 删除以句点结尾的行的句点
s/^[ ][ ]*// 删除行首的任意个空格
s/^.// 删除行首的第一个字符
s/^\/// 删除行首的“/”字符
s/SP\(..\)//g 删除字符“SP”以及紧跟其后的两个任意字符，“SPLLY”-->“Y”
$ sed -e '1,10s/enchantment/entrapment/g' myfile2.txt

上例将导致用短语 'entrapment' 替换所有出现的短语 'enchantment'，但是只在第一到第十行（包括这两行）上这样做。

[Copy to clipboard] [ - ]

-e：多次编辑，例如先将所有的123替换为234，再将第7行前加#号注释
sed -i -e 's/123/234/g' -i -e '7 s/^/#/' test.txt
-f：指定sed脚本文件名
-n：取消默认的输出（不打印），用sed不加任何选项的话你会看到所有内容输出，并不是按照sed命令所限制的条件输出，那么配合“p”命令经可以过滤掉不符合条件的行，并显示出符合条件的行，例如
sed -n '查找所有包含字符123的行'p test.txt 或 sed -n '查找所有包含字符123的行p' test.txt

sed命令：这里可以使用正则表达式，如遇特殊字符，需用“\”来屏蔽其特殊含义，例如“\$”表示普通的字符$

x x为某行行号
x,y 例如2,5，从第2行到第5行
/val/ 查询包含“val”字符的行
/val1/val2/ 查询包含两个模式的行
val/,x 在给定行号的行上查询包含“val”的行
x,/val/ 通过行号和模式查询匹配的行
x,y! 不包含指定行号x,y的行

p 打印匹配的行
= 显示行号
a\ 在定位了的行之后附加内容
i\ 在定位了的行之后插入内容
d 删除定位的行，例如：2d 代表删除第2行
c\ 用新文本替换定位行的文本
s 替换，形式为：'s/查找的内容/替换的内容/'
g 进行全局替换，如不使用此选项将只对该行匹配到的第一个结果进行替换，该行下一个匹配的就不处理了。
