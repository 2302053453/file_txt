你好，可以用一个提问来开始：请问java里如何使一个类，只能实例化一次？
回答就是：单例模式。

具体代码体现为
public class A{
	private A(){}//把构造函数设为private，其它类就不能再调用实例化
	private static A instance=new A();//惟一的一个实例，加上static属性
	public static A getInstance(){//其它类调用A的惟一入口，也是static属性，调用方法是A.getInstance()
		return instance;
	}
} 


单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，
从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。

数学与逻辑学中，singleton定义为“有且仅有一个元素的集合”。
单例模式最初的定义出现于《设计模式》（艾迪生维斯理, 1994）：“保证一个类仅有一个实例，并提供一个访问它的全局访问点。”
Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”
Java单例模式例子
	
public class SingletonClass{
    private static SingletonClass instance=null;
    public static SingletonClass getInstance(){
        if(instance==null){
            synchronized(SingletonClass.class){
                if(instance==null){
                    instance=new SingletonClass();
                }
            }
        }
        return instance;
    }
    private SingletonClass(){}
}

第一种形式:懒汉式，也是常用的形式。

	public class SingletonClass{
	    private static SingletonClass instance=null;
	    public static　synchronized　SingletonClass getInstance()  //其它类调用A的惟一入口，也是static属性，调用方法是A.getInstance(
	    {
		if(instance==null)
		{
		       instance=new SingletonClass();
		}
		return instance;
	    }
	    private SingletonClass(){
	    }
	}
第二种形式:饿汉式

	
	//对第一行static的一些解释
	// java允许我们在一个类里面定义静态类。比如内部类（nested class）。
	//把nested class封闭起来的类叫外部类。
	//在java中，我们不能用static修饰顶级类（top level class）。
	//只有内部类可以为static。
	public static class Singleton{
	    //在自己内部定义自己的一个实例，只供内部调用
	    private static final Singleton instance = new Singleton();    //惟一的一个实例，加上static属性
	    private Singleton(){    //把构造函数设为private，其它类就不能再调用实例化
		//do something
	    }
	    //这里提供了一个供外部访问本class的静态方法，可以直接访问  //其它类调用A的惟一入口，也是static属性，调用方法是A.getInstance(
	    public static Singleton getInstance(){
		return instance;
	    }
	}
第三种形式: 双重锁的形式。
	
public static class Singleton{
    private static Singleton instance=null;
    private Singleton(){
        //do something
    }
    public static Singleton getInstance(){
        if(instance==null){
            synchronized(Singleton.class){
                if(null==instance){
                    instance=new Singleton();
                }
            }
        }
        return instance;
    }
}
 
 
 

 
