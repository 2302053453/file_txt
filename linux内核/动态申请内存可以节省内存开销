即使是静态的，全局变量还是越少越好。


不光是linux，裸机上也是这样。


    把相关的变量放到一个结构体里，在使用时再动态划分，这样减小了代码的总体大小，因而也节省了内存。

    更方便调试。以前调试出现过类似的情景，因为自己写的链接脚本中未包含 common 段，出现全局变量为随机值的情况。

    你可能怀疑直接使用static 变量比用机构体效率更高，其实不然，结构体传来传去的参数转换都是在编译时就解决的，对运行时影响不大。



申请内存：

	void *kmalloc(size_t size, int flags)
	p_bak_ref = (u8 *)kzalloc(ts->bak_ref_len, GFP_KERNEL);
	ts = kzalloc(sizeof(*ts), GFP_KERNEL);  

    kmalloc函数和malloc函数相似，它有两个参数，一个参数是size，即申请内存块的大小，这个参数比较简单，就像malloc中的参数一样。第二个参数是一个标志，在里面可以指定优先权之类的信息。在Linux中，有以下的一些优先权：

    GFP_KERNEL，它的意思是该内存分配是由运行在内核模式的进程调用的，即当内存低于min_free_pages的时候可以让该进程进入睡眠；

    GFP_ATOMIC，原子性的内存分配允许在实际内存低于min_free_pages时继续分配内存给进程。

    GFP_DMA：此标志位需要和GFP_KERNEL、GFP_ATOMIC等一起使用，用来申请用于直接内存访问的内存页。

    释放：

    Kfree（const void *objp） const void *objp=为需要释放的内存空间指针。

 

 
1 kmalloc

	kmalloc()函数与用户空间malloc一组函数类似，获得以字节为单位的一块内核内存。

	void *kmalloc(size_t size, gfp_t flags)

	void kfree(const void *objp)

	 

	分配内存物理上连续。

	gfp_t标志：表明分配内存的方式。如：

	GFP_ATOMIC：分配内存优先级高，不会睡眠

	GFP_KERNEL：常用的方式，可能会阻塞。
2 vmalloc    

	void *vmalloc(unsigned long size)

	void vfree(const void *addr)

	vmalloc()与kmalloc方式类似，vmalloc分配的内存虚拟地址是连续的，而物理地址则无需连续，与用户空间分配函数一致。

	vmalloc通过分配非连续的物理内存块，在修正页表，把内存映射到逻辑地址空间的连续区域中，虚拟地址是连续的。

	       是否必须要连续的物理地址和具体使用场景有关。在不理解虚拟地址的硬件设备中，内存区都必须是连续的。

	       通过建立页表转换成虚拟地址空间上连续，肯定存在一些消耗，带来性能上影响。

	所以通常内核使用kmalloc来申请内存，在需要大块内存时使用vmalloc来分配。

 
