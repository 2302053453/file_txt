
1 git config
	git config –global user.name “Your Name”
	git config –global user.email “you@example.com”
2 git init

3 git commit -a -m “ ”

4 git remote -v

5 git remote add origin git@192.168.2.249:root/imx6-android-4.4.3.git

6 git push -u origin master

7 got clone git@192.168.2.249:root/imx6-android-4.43.git

进入gitlab
http://192.168.2.249:8012/

git status
git diff
git log


    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


git log 
git status
git branck
git checkout 
git commit	-am "描述信息"
git add 
git commit  -m "提交的描述信息"
	如果我们这里不用-m参数的话，git将调到一个文本编译器（通常是vim）来让你输入提交的描述信息
	可能一天下来，你对工作树中的许多文档都进行了更新（文档添加、修改、删除），但是我忘记了它们的名字，此时若将所做的全部更新添加到索引中，比较轻省的做法就是：
git commit -a -m "提交的描述信息"
git commit 命令的-a 选项可只将所有被修改或者已删除的且已经被git管理的文档提交倒仓库中。如果只是修改或者删除了已被Git 管理的文档，是没必要使用git add 命令的。
git add .	命令除了能够判断出当前目录（包括其子目录）所有被修改或者已删除的文档，还能判断用户所添加的新文档，并将其信息追加到索引中。
git commit --amend 对于已经修改提交过的注释，如果需要修改，可以借助 git commit --amend 来进行。


git diff readme.txt
git diff master

git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容　　　　
#回退所有内容到上一个版本　　　　
git　　reset　　HEAD^　　　　　　
#回退a.py这个文件的版本到上一个版本　　　　　　
git　　reset　　HEAD^　　a.py　　　　　　
#向前回退到第3个版本　　　　　　
git　　reset　　–soft　　HEAD~3　

上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

git reset --hard (版本ID）
git reset --hard 3628164
git reflog用来记录你的每一次命令

git reset --hard commit_id
git reset --soft 


git 删除 错误 提交的 commit
方法: 
        根据–soft –mixed –hard，会对working tree和index和HEAD进行重置:
    git reset --mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息
    git reset --soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可
    git reset  --hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，此命令 慎用！


    HEAD 最近一个提交
    HEAD^ 上一次提交

    HEAD^ ^ 上一次的 上一次的提交（倒数第三次）

    HEAD^^^ 倒数 第四次的 提交
----------------------

    HEAD~0 最近一个提交
    HEAD~1 上一次提交

    HEAD^2 上一次的 上一次的提交（倒数第三次）

    HEAD^3 倒数 第四次的 提交

Git Reset

有时候，你可能想要撤销 Git 操作。通常，git reset 就是你需要的命令。但是，使用 git reset 可能会非常复杂，取决于你的撤销操作。如果本文没有提到你需要的，查看 git reset 官方文档。

假设，你正在进行一个项目，想要取消所有的改变，返回到最近一次的提交，命令如下：

$ git reset --hard HEAD

–hard flag 将指定提交（上例中，HEAD）中的任意内容放入工作目录和缓存区内。因为 HEAD 是最近一次提交，所以我们没有做任何改变。运行 git status，会看到提示没有需要提交的。

还有其它一些 git reset 使用的 flag。假设你想要回滚你的项目到多个提交之前，但是想要保存没有提交的改变，尝试下面的：

$ git reset --soft 3ce072c72d948abfa

当然，替换为你自己需要的 hash。–soft flag 将保存你的改变在工作目录和缓存区。换句话来说，最新的提交将会是你选择的提交。

还有很多情况，你可以使用 git reset。如果你认为需要这个名利概念的功能，查看文档。
Git Checkout

我们之前就提到过 git checkout 命令：用于切换分支。但是还有更多的特性。比如使用 -b flag 同一时间，建立并切换到新分支：

$ git checkout -b newBranchName
 Switched to a new branch ‘newBranchName’

git checkout 也可以进行回滚撤销工作。git reset 回滚整个提交，而 git checkout 可以回滚单个文件。回滚在缓存区内的文件：
git将单个文件恢复到历史版本的正确方法如下：
   git reset commit_id 文件路径
   git checkout -- 文件路径

$ git checkout -- file.ext
git checkout -- ./kernel_imx/drivers/input/touchscreen/gt9xx/gt9xx.h  回到最新版态

如果需要回滚提交中的文件，替换指定提交的指针，如下所示：

$ git checkout HEAD file.ext
$ git checkout master~2 file.exe

Git Diff

另外一个很有用的 Git 命令是 git diff。使用这个命令找出两个文件，提交或分支之间的改变。假设你想看自从上一次提交后工作目录都有什么改变，可以执行如下命令：

$ git diff

如果只是想看一个文件的改变，添加文件名作为参数：

$ git diff index.html

如果想要比较最新提交和缓存区内的文件，使用 –cached flag。

$ git diff --cached
$ git diff --cached index.html

比较工作目录和一个提交，使用想要比较的提交的指针，代替上例中的 –cached flag。

$ git diff be96dbeab1
$ git diff HEAD^2 index.html

也可以使用 git diff 比较分支。将两个分支名作为参数，两个分支名中间为两个 “.”：

$ git diff master..otherBranch

这样 Git 将会 diff 两个分支的最新提交。如果需要 diff otherBranch 分支和 master 主分支，在分支名间加入三个 “.”。当然，使用你的分支名。

$ git diff master...otherBranch

又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程


1. 查看远程仓库
	$ git remote -v
	eoecn   https://github.com/eoecn/android-app.git (fetch)
	eoecn   https://github.com/eoecn/android-app.git (push)
	origin  https://github.com/com360/android-app.git (fetch)
	origin  https://github.com/com360/android-app.git (push)
	从上面的结果可以看出，远程仓库有两个，一个是eoecn，一个是origin


2 ,从远程获取最新版本到本地
	$ git fetch origin master
	$ git fetch origin master 这句的意思是：从远程的origin仓库的master分支下载代码到本地的origin master

	3. 比较本地的仓库和远程参考的区别

	$ git log -p master.. origin/master
	git show i.MX6DL-M41 origin/master 
	git diff i.MX6DL-M41 origin/master   比较本地和远程仓库的不同 
	su@SUCHANGLI /e/eoe_client/android-app (master)
	因为我的本地仓库和远程仓库代码相同所以没有其他任何信息
 	git branch -r 获得远程版本库信息


4. 把远程下载下来的代码合并到本地仓库，远程的和本地的合并
	$ git merge origin/master
	Already up-to-date.
	su@SUCHANGLI /e/eoe_client/android-app (master)

	我的本地参考代码和远程代码相同，所以是Already up-to-date



以上的方式有点不好理解，大家可以使用下面的方式，并且很安全
方式二
1.查看远程分支，和上面的第一步相同
2. 从远程获取最新版本到本地

	$ git fetch origin master:temp
	From https://github.com/com360/android-app
	 * [new branch]      master     -> temp
	su@SUCHANGLI /e/eoe_client/android-app (master)
	git fetch origin master:temp 这句命令的意思是：从远程的origin仓库的master分支下载到本地并新建一个分支temp

	    比较本地的仓库和远程参考的区别

	$ git diff temp
	su@SUCHANGLI /e/eoe_client/android-app (master)

	命令的意思是：比较master分支（个人理解为“本地master分支”）和temp分支的不同
	由于我的没有区别就没有显示其他信息
4. 合并temp分支到master分支（个人理解为“本地master分支”）
	$ git merge temp
	Already up-to-date.
	su@SUCHANGLI /e/eoe_client/android-app (master)

	由于没有区别，所以显示Already up-to-date.
	合并的时候可能会出现冲突，有时间了再把如何处理冲突写一篇博客补充上。
5.如果不想要temp分支了，可以删除此分支
	$ git branch -d temp
	Deleted branch temp (was d6d48cc).
	su@SUCHANGLI /e/eoe_client/android-app (master)

	如果该分支没有合并到主分支会报错，可以用以下命令强制删除git branch -D <分支名>

总结：方式二更好理解，更安全，对于pull也可以更新代码到本地，相当于fetch+merge，多人写作的话不够安全。
如有错误请指正

我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：

$ git log -p -2
我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：

或者要快速浏览其他协作者提交的更新都作了哪些改动时，就可以用这个选项。此外，还有许多摘要选项可以用，比如 --stat，仅显示简要的增改行数统计：

$ git log --stat 

二、git log --pretty

然后使用下面的命令可列出文件的所有改动历史，注意，这里着眼于具体的一个文件，而不是git库，如果是库，那改动可多了去了～

git log --pretty=oneline 文件名

如：

root@ubuntu:android_src/packages/apps/Mms/src/com/android/mms/ui# git log --pretty=oneline MessageItem.java 
27209385caf678abe878375a470f4edd67a2d806 fix to process force close when empty address contained in card
0e04b16f1dad7dc0a36e2235f7337bc656c365c7 display for 1970-1-1
e4abf3a213197491e0855e101117b59b5dc0160d HREF#13954 receive, store, and display wap push
 三、git show

如上所示，打印出来的就是针对文件MessageItem.java的所有的改动历史，每一行最前面的那一长串数字就是每次提交形成的哈希值，接下来使用git show即可显示具体的某次的改动的修改～

git show e4abf3a213197491e0855e101117b59b5dc0160d

    git help <command>  # 显示command的help  
    git show            # 显示某次提交的内容  
    git show $id  
       
    git co  -- <file>   # 抛弃工作区修改  
    git co  .           # 抛弃工作区修改  
       
    git add <file>      # 将工作文件修改提交到本地暂存区  
    git add .           # 将所有修改过的工作文件提交暂存区  
       
    git rm <file>       # 从版本库中删除文件  
    git rm <file> --cached  # 从版本库中删除文件，但不删除文件  
       
    git reset <file>    # 从暂存区恢复到工作文件  
    git reset -- .      # 从暂存区恢复到工作文件  
    git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改  
       
    git ci <file>  
    git ci .  
    git ci -a           # 将git add, git rm和git ci等操作都合并在一起做  
    git ci -am "some comments"  
    git ci --amend      # 修改最后一次提交记录  
       
    git revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象  
    git revert HEAD     # 恢复最后一次提交的状态  


git diff <file>     # 比较当前文件和暂存区文件差异  
git diff  
git diff <$id1> <$id2>   # 比较两次提交之间的差异  
git diff <branch1>..<branch2> # 在两个分支之间比较  
git diff --staged   # 比较暂存区和版本库差异  
git diff --cached   # 比较暂存区和版本库差异  
git diff --stat     # 仅仅比较统计信息
git diff HEAD 查看当前工作区和HEAD（即版本库）的不同

Git撤销修改 
1.场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
2.场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。


git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。



    git log  
    git log <file>      # 查看该文件每次提交记录  
    git log -p <file>   # 查看每次详细修改内容的diff  
    git log -p -2       # 查看最近两次详细修改内容的diff  
    git log --stat      #查看提交统计信息  
取得Git仓库
C代码  收藏代码

    #初始化一个版本仓库  
    git init  
      
    #Clone远程版本库  
    git clone git@xbc.me:wordpress.git  
      
    #添加远程版本库origin，语法为 git remote add [shortname] [url]  
    git remote add origin git@xbc.me:wordpress.git  
      
    #查看远程仓库  
    git remote -v  

 git add .  
  
#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件  
git add -u  
  
#提交你的修改  
git commit –m "你的注释"  
  
#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]  
git push origin master  
  
#查看文件状态  
git status  
  
#跟踪新文件  
git add readme.txt  
  
#从当前跟踪列表移除文件，并完全删除  
git rm readme.txt  
  
#仅在暂存区删除，保留文件在当前目录，不再跟踪  
git rm –cached readme.txt  
  
#重命名文件  
git mv reademe.txt readme  
  
#查看提交的历史记录  
git log  
  
#修改最后一次提交注释的，利用–amend参数  
git commit --amend  
  
#忘记提交某些修改，下面的三条命令只会得到一个提交。  
git commit –m &quot;add readme.txt&quot;  
git add readme_forgotten  
git commit –amend  
  
#假设你已经使用git add .，将修改过的文件a、b加到暂存区  
  
#现在你只想提交a文件，不想提交b文件，应该这样  
git reset HEAD b  
  
#取消对文件的修改  
git checkout –- readme.txt  git br -r           # 查看远程分支  
git br <new_branch> # 创建新的分支  
git br -v           # 查看各个分支最后提交信息  
git br --merged     # 查看已经被合并到当前分支的分支  
git br --no-merged  # 查看尚未被合并到当前分支的分支  
   
git co <branch>     # 切换到某个分支  
git co -b <new_branch> # 创建新的分支，并且切换过去  
git co -b <new_branch> <branch>  # 基于branch创建新的new_branch  
   
git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  
git co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支  
   
git br -d <branch>  # 删除某个分支  
git br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
    git merge <branch>               # 将branch分支合并到当前分支  
    git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交  
       
    git rebase master <branch>       # 将master rebase到branch，相当于：  
    git co <branch> && git rebase master && git co master && git merge <branch>  

 
Git补丁管理(方便在多台机器上开发同步时用)
C代码  收藏代码

    git diff > ../sync.patch         # 生成补丁  
    git apply ../sync.patch          # 打补丁  
    git apply --check ../sync.patch  #测试补丁能否成功  

  Git暂存管理
C代码  收藏代码

    git stash                        # 暂存  
    git stash list                   # 列所有stash  
    git stash apply                  # 恢复暂存的内容  
    git stash drop                   # 删除暂存区  
git pull                         # 抓取远程仓库所有分支更新并合并到本地  
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并  
git fetch origin                 # 抓取远程仓库更新  
git merge origin/master          # 将远程主分支合并到本地当前分支  
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支  
git co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上  
   
git push                         # push所有分支  
git push origin master           # 将本地主分支推到远程主分支  
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)  
git push origin <local_branch>   # 创建远程分支， origin是远程仓库名  
git push origin <local_branch>:<remote_branch>  # 创建远程分支  
git push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支 
基本的分支管理
C代码  收藏代码

    #创建一个分支  
    git branch iss53  
      
    #切换工作目录到iss53  
    git chekcout iss53  
      
    #将上面的命令合在一起，创建iss53分支并切换到iss53  
    git chekcout –b iss53  
      
    #合并iss53分支，当前工作目录为master  
    git merge iss53  
      
    #合并完成后，没有出现冲突，删除iss53分支  
    git branch –d iss53  
      
    #拉去远程仓库的数据，语法为 git fetch [remote-name]  
    git fetch  
      
    #fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并  
    git pull  
      
    #查看远程仓库的信息  
    git remote show origin  
      
    #建立本地的dev分支追踪远程仓库的develop分支  
    git checkout –b dev origin/develop  

 
Git远程仓库管理
C代码  收藏代码

    git remote -v                    # 查看远程服务器地址和仓库名称  
    git remote show origin           # 查看远程服务器仓库状态  
    git remote add origin git@ github:robbin/robbin_site.git         # 添加远程仓库地址  
    git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)  
    git remote rm <repository>       # 删除远程仓库  

 
创建远程仓库
C代码  收藏代码

    git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库  
    scp -r my_project.git git@ git.csdn.net:~      # 将纯仓库上传到服务器上  
       
    mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库  
    git remote add origin git@ github.com:robbin/robbin_site.git    # 设置远程仓库地址  
    git push -u origin master                                      # 客户端首次提交  
    git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track  
       
    git remote set-head origin master   # 设置远程仓库的HEAD指向master分支  

 
也可以命令设置跟踪远程库和本地库
    git branch --set-upstream master origin/master  
    git branch --set-upstream develop origin/develop  

在.gitignore忽略已经跟踪的文件
	git update-index --assume-unchanged  文件路径
	git update-index --assume-unchanged ./kernel_imx/arch/arm/boot/dts/imx6q-sabresd-hdcp.dtb
恢复跟踪文件
	git update-index --no-assume-unchanged 文件路径
	git update-index --no-assume-unchanged ./kernel_imx/arch/arm/boot/dts/imx6q-sabresd-ldo.dtb

版本库删除命令
	$ git rm -r --cached gen

参数”–cached”表示的是删除版本库对文件的追踪，如果不加此参数，则表示对本地物理文件的删除，我删除的是gen目录，使用-r进行递归删除，同理可以删除版本库中提交过的其他的不需要track的目录或者文件。(输入命令以及提示如下)

	yan@YAN-PC /D/yan/eclipse/wkandroidMap/tracker (master)
	$ git rm -r --cached gen
	rm 'gen/android/support/v7/appcompat/R.java'
	rm 'gen/com/bityan/tracker/BuildConfig.java'

这里就要注意.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了。删除后需要提交修改 同步版本库。
	$ git status
	# Untracked files:
	#   (use "git add <file>..." to include in what will be committed)
	#
	#       bin/
	#       gen/
	$ git add -A
	$ git commit -m "版本库删除gen和bin目录"

git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。
git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。
关于Git Stash的详细解释，适用场合，这里做一个说明
git stash apply stash@{1}'


这个是一个同事让我把他的repository若干个commit变成一个，我用git rebase -i合并到最后发现剩下只有两个commit的时候，git rebase -i不再起作用，于是我求助了git maillist,果然很快有人给出了答案:

$ git reset --soft HEAD^1

$ git commit --amend


2
3
	
git fetch origin master
git log -p master..origin/master
git merge origin/master

    从远程的origin仓库的master主分支更新最新的版本到origin/master分支上

    比较本地的master分支和origin/master分支的差别

    合并内容到本地master分支
git pull相当于git fetch后再做一个git merge


git cherry-pick用于把另一个本地分支的commit修改应用到当前分支。

git reflog show HEAD 

git reflog
git reflog -5                          查看最近五次的操作记录，默认是HEAD
git reflog show master –5              查看master最近五次的操作记录

git log --graph --pretty=oneline --abbrev-commit








